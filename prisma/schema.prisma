generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Available {
  id               BigInt  @id @default(autoincrement())
  available_status String? @db.VarChar(100)
  Cars             Cars[]
}

model Cars {
  id              BigInt     @id @default(autoincrement())
  plate           String?    @db.VarChar(25)
  model_id        BigInt?
  rentPerDay      Float?
  description     String?    @db.VarChar(255)
  availableAt     DateTime?  @db.Timestamp(6)
  availability_id BigInt?
  year            Int?
  image           String?    @db.VarChar(255)
  Available       Available? @relation(fields: [availability_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Models          Models?    @relation(fields: [model_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Manufacture {
  id                 BigInt   @id @default(autoincrement())
  manufacture_name   String?  @db.VarChar(100)
  manufacture_region String?  @db.VarChar(100)
  year_establish     Int?
  Models             Models[]
}

model Models {
  id              BigInt         @id @default(autoincrement())
  model_name      String?        @db.VarChar(100)
  transmission_id BigInt?
  capacity        Int?
  type_id         BigInt?
  manufacture_id  BigInt?
  Cars            Cars[]
  Manufacture     Manufacture?   @relation(fields: [manufacture_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Transmission    Transmission?  @relation(fields: [transmission_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Type            Type?          @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modelOptions    modelOptions[]
  modelSpecs      modelSpecs[]
}

model Options {
  id           BigInt         @id @default(autoincrement())
  option_name  String?        @db.VarChar(100)
  modelOptions modelOptions[]
}

model Specs {
  id         BigInt       @id @default(autoincrement())
  spec_name  String?      @db.VarChar(100)
  modelSpecs modelSpecs[]
}

model Transmission {
  id                BigInt   @id @default(autoincrement())
  transmission_name String?  @db.VarChar(100)
  Models            Models[]
}

model Type {
  id        BigInt   @id @default(autoincrement())
  type_name String?  @db.VarChar(100)
  Models    Models[]
}

model modelOptions {
  model_id  BigInt
  option_id BigInt
  Models    Models  @relation(fields: [model_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_model")
  Options   Options @relation(fields: [option_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_option")

  @@id([model_id, option_id])
}

model modelSpecs {
  model_id BigInt
  spec_id  BigInt
  Models   Models @relation(fields: [model_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_model_spec")
  Specs    Specs  @relation(fields: [spec_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_spec")

  @@id([model_id, spec_id])
}

model users {
  id              BigInt  @id(map: "users_pk") @default(autoincrement())
  name            String  @db.VarChar
  email           String  @unique(map: "users_email_idx") @db.VarChar
  password        String  @db.VarChar
  profile_picture String? @db.VarChar
  role_id         Int     @default(2)
}
